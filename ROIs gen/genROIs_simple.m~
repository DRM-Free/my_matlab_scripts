%MIT License

%Copyright (c) 2018 AnaÃ«l Leinert

%Permission is hereby granted, free of charge, to any person obtaining a copy
%of this software and associated documentation files (the "Software"), to deal
%in the Software without restriction, including without limitation the rights
%to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
%copies of the Software, and to permit persons to whom the Software is
%furnished to do so, subject to the following conditions:

%The above copyright notice and this permission notice shall be included in all
%copies or substantial portions of the Software

function [all_simple_rois,shrink_thresholds,expand_thresholds]= genROIs_simple(roiObj,world_extent,range,nIter)
%range is the size of the area to be considered around each point for growth or shrink.
%threshold represents how easy it will be to grow or shrink. 0 will always
%grow, 1 will always shrink
refROI=roiObj.data;
roiObj_regular=interpVolume(roiObj,[1,1,1],'linear',0.5,'roi');
refROI_normalized_ref=roiObj_regular.data;
%Those thersholds were chosen for a range of 5
% good_shrink_thresholds=[0.3,0.35,0.4,0.45,0.5]; %>0.5 can give unexpected behaviour, sometimes overshrink and matrix becomes 0
shrink_thresholds=[0.31,0.32,0.33]; %>0.5 can give unexpected behaviour, sometimes overshrink and matrix becomes 0
%<0.3 for shrink actually becomes an expand
% good_expand_thresholds=[0.05,0.1,0.15,0.2,0.25];
expand_thresholds=[0.2,0.1]; %>0.3 is not an expand any more
mask=genMask(range);
maxCv=numel(mask);
mask_type='spherical';
% shrink
for shrink_thresh_number=1:numel(shrink_thresholds)
    thresh_field_name=strcat(strcat("thresh_",num2str(shrink_thresholds(shrink_thresh_number))));
    thresh_field_name=strrep(thresh_field_name,'.','');
    thresh_field_name=char(thresh_field_name);
    for i=1:nIter
        iter_field_name=strcat(strcat("shrink_",num2str(i)),"_iter");
        iter_field_name=char(iter_field_name);
        
        if i>1
            previous_iter_field_name=strcat(strcat("shrink_",num2str(i-1)),"_iter");
            previous_iter_field_name=char(previous_iter_field_name);
            shrink_ROI=all_simple_rois.(previous_iter_field_name).(thresh_field_name).full_scale; %reduced version of ROI was saved so this can't work
        else
            shrink_ROI=refROI_normalized_ref;
        end
        new_shrink_ROI=convn(shrink_ROI,mask,'same');
        cvThresh=shrink_thresholds(shrink_thresh_number)*maxCv;
        %         new_shrink_ROI(new_shrink_ROI>=cvThresh)=-1;
        %         new_shrink_ROI(new_shrink_ROI>0)=0;
        %         new_shrink_ROI(new_shrink_ROI==-1)=1;
        new_shrink_ROI(new_shrink_ROI<cvThresh)=0;
        new_shrink_ROI(new_shrink_ROI>0)=1;
        
        roiObj_regular.data=new_shrink_ROI;
        roiObj_final=interpVolume(roiObj_regular,[world_extent(1),world_extent(2),world_extent(3)],'linear',0.5,'roi');
        original_scale_shrink_ROI=roiObj_final.data;
        
        %Here an approximation is made in order to keep original ROI size !
        original_scale_shrink_ROI=original_scale_shrink_ROI(1:size(refROI,1),1:size(refROI,2),1:size(refROI,3));
        
        try
            all_simple_rois.(iter_field_name).(thresh_field_name)=struct('original_scale',original_scale_shrink_ROI,'full_scale',new_shrink_ROI);
        catch
            try
                all_simple_rois.(iter_field_name).(thresh_field_name)=struct;
                all_simple_rois.(iter_field_name).(thresh_field_name)=struct('original_scale',original_scale_shrink_ROI,'full_scale',new_shrink_ROI);
            catch
                all_simple_rois=struct;
                all_simple_rois.(iter_field_name).(thresh_field_name)=struct;
                all_simple_rois.(iter_field_name).(thresh_field_name)=struct('original_scale',original_scale_shrink_ROI,'full_scale',new_shrink_ROI);
            end
        end
    end
end

%expand
for expand_thresh_number=1:numel(expand_thresholds)
    thresh_field_name=strcat(strcat("thresh_",num2str(expand_thresholds(expand_thresh_number))));
    thresh_field_name=strrep(thresh_field_name,'.','');
    thresh_field_name=char(thresh_field_name);
    for i=1:nIter
        iter_field_name=strcat(strcat("expand_",num2str(i)),"_iter");
        iter_field_name=char(iter_field_name);
        
        if i>1
            previous_iter_field_name=strcat(strcat("expand_",num2str(i-1)),"_iter");
            previous_iter_field_name=char(previous_iter_field_name);
            expand_roi=all_simple_rois.(previous_iter_field_name).(thresh_field_name).full_scale;
        else
            expand_roi=refROI_normalized_ref;
        end
        new_expand_roi=convn(expand_roi,mask,'same');
        cvThresh=expand_thresholds(expand_thresh_number)*maxCv;
        new_expand_roi(new_expand_roi<=cvThresh)=0;
        new_expand_roi(new_expand_roi>0)=1;
        
        roiObj_regular.data=new_expand_roi;
        roiObj_final=interpVolume(roiObj_regular,[world_extent(1),world_extent(2),world_extent(3)],'linear',0.5,'roi');
        original_scale_expand_roi=roiObj_final.data;
        
        %Here an approximation is made in order to keep original ROI size !
        original_scale_expand_roi=original_scale_expand_roi(1:size(refROI,1),1:size(refROI,2),1:size(refROI,3));
        
        try
            all_simple_rois.(iter_field_name).(thresh_field_name)=struct('original_scale',original_scale_expand_roi,'full_scale',new_expand_roi);
        catch
            try
                all_simple_rois.(iter_field_name).(thresh_field_name)=struct;
                all_simple_rois.(iter_field_name).(thresh_field_name)=struct('original_scale',original_scale_expand_roi,'full_scale',new_expand_roi);
            catch
                all_simple_rois=struct;
                all_simple_rois.(iter_field_name).(thresh_field_name)=struct;
                all_simple_rois.(iter_field_name).(thresh_field_name)=struct('original_scale',original_scale_expand_roi,'full_scale',new_expand_roi);
            end
        end
    end
end

%Now return ROIs with full generation data
keep all_simple_rois shrink_thresholds expand_thresholds range mask_type
new_ROIs=table;
iter_names=fieldnames(all_simple_rois);
for iter=1:numel(iter_names)
    thresh_names=fieldnames(all_simple_rois.(iter_names{iter}));
    for thresh=1:numel(thresh_names)
        roi=all_simple_rois.(iter_names{iter}).(thresh_names{thresh}).original_size;
        gen_data=struct('thresh',thresh_names{thresh},'iteration',iter_names{iter},'mask_type',mask_type,'mask_size',range);
        gen_type='simple_conv';
        roi_table=table;
        roi_table.segment=roi;
        roi_table.gen_data=gen_data;
        roi_table.gen_type=gen_type;
        try
            new_ROIsT(end+1:end+4,:)=roi_table;
        catch
            new_ROIs=roi_table;
        end
    end
end

end
